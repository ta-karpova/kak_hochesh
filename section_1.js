// =====================================
// Раздел 1. Основы JavaScript
// =====================================

// =====================================
// 3. Строгий режим — "use strict"
// =====================================
// alert('some code')
// // 'use strict' ниже игнорируется - он должен быть в первой строке
// 'use strict'
// строгий режим не активирован

// =====================================
// 5. Типы данных
// =====================================
// Что выведет
// let hisName = "Ilya"

// alert( `hello ${1}` ) // hello 1
// alert( `hello ${"name"}` ) // hello name
// alert( `hello ${ hisName}` ) // hello Ilya

// =====================================
// 6. Взаимодействие: alert, prompt, confirm
// =====================================
// alert('Hello') // оказывает сообщение и ждёт, пока пользователь нажмёт кнопку «ОК»
// result = prompt(title, [default]) // возвращает текст, указанный в поле для ввода, или null, если ввод отменён пользователем

// Задача
// let nameV = prompt('Ваше имя?', '')
// alert(nameV)

// =====================================
// 7. Преобразование типов
// =====================================

// -------------------------------------
// Логическое преобразование: Значения, которые интуитивно «пустые», вроде 0, пустой строки, null, undefined и NaN, становятся false, остальные true
// console.log( Boolean(1) ) // true
// console.log( Boolean(0) ) // false
// console.log( Boolean('Привет!') ) // true
// console.log( Boolean('') ) // false


// let value = true
// alert(typeof value) // boolean

// value = String(value) // value строка 'true'
// alert(typeof value) // string

// =====================================
// 8. Базовые операторы, математика
// =====================================
// let a = 1, b = 1
// let c = ++a // ?
// let d = b++ // ?
// console.log(a) // 2
// console.log(b) // 2
// console.log(c) // 2
// console.log(d) // 1

// alert( ++a ) // 2, префиксная форма возвращает новое значение
// alert( b++ ) // 1, постфиксная форма возвращает старое значение, но увеличивает значение переменной

// alert( a ) // 2, значение увеличено один раз
// alert( b ) // 2, значение увеличено один раз

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
// Задача 3 - определить результаты 

// '' + 1 + 0 = 10 // '1'+0
// '' - 1 + 0 = -1 // '-' только с числами, '' = 0
// true + false = 1 // после преобразования 1 + 0 = 1
// 6 / '3' = 2 // преобразовывает в число
// '2' * '3' = 6 // только с числами
// 4 + 5 + 'px' = 9px
// '$' + 4 + 5 = $45 // всё становится строкой
// '4' - 2 = 2 // '-' только с числами
// '4px' - 2 = NaN // не удалось преобразовать в число
// 7 / 0 = Infinity
// '  -9  ' + 5 = '  -9  5' // строки сложились, если поменять местами слагаемые, они тоже просто строкой станут
// '  -9  ' - 5 = -14 //'-' только с числами, строка стала числом
// null + 1 = 1 // null становится 0 после численного преобразования
// undefined + 1 = NaN // undefined становится NaN после численного преобразования
// ' \t \n' - 2 = -2 // символы игнорируются (????????????) r, t, n игнор, остальные нет
// console.log(' \r' - 2) //-2
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
// Задача 4

// let a = prompt('Первое число?', 1)
// let b = prompt('Второе число?', 2)
// console.log(Number(a) + Number(b)) // (+a + +b)
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 

// =====================================
// 9. Операторы сравнения - разные типы при сравнении становятся числами (исключение строгое равенство/неравенство) 
// =====================================
// Результаты сравнения имеют логический тип
// console.log( 2 > 1 )  // true 
// console.log( 2 == 1 ) // false 
// console.log( 2 != 1 ) // true 

// -------------------------------------
// Строки сравниваются в алфавитном порядке посимвольно, в кодировке  Unicode
// console.log( 'Коты' > 'Кода' ) // true
// console.log( 'Кода' > 'Кода' ) // false
// console.log( 'Сонный' > 'Сон' ) // true
// console.log( 'Мишка' > 'мишка' ) // false строчные буквы имеют больший код во внутренней таблице кодирования

// -------------------------------------
// При сравнении значений разных типов JavaScript приводит каждое из них к числу
// console.log( '2' > 1 ); // true, строка '2' становится числом 2
// console.log( '01' == 1 ); // true, строка '01' становится числом 1
// console.log( true == 1 ); // true
// console.log( false == 0 ); // true
// -------------------------------------
// let a = 1;
// console.log( Boolean(a) ); // true
// -------------------------------------
// let a = 0;
// console.log( Boolean(a) ); // false
// -------------------------------------
// let a = 1;
// console.log( Boolean(a) ); // true
// -------------------------------------
// Странный пример
// let a = 0
// console.log(Boolean(a)) // false
// let b = "0"
// console.log(Boolean(b)) // true
// console.log(a == b) // true
// -------------------------------------

// -------------------------------------
// Строгое сравнение
// console.log( 0 == false ) // true
// console.log( '' == false ) // true
// console.log( 0 === false ) // СТРОГОЕ, false, сравниваются разные типы
// -------------------------------------
// Сравнение с null и undefined
// console.log(null === undefined) // false (разные типы -> различны)
// console.log(null == undefined) // true (специальное правило языка)
// -------------------------------------
// null с нулём ():
// console.log(null > 0)  // (1) false (null стал 0)
// console.log(null == 0) // (2) false (для нестрогого равенства == значений undefined и null действует особое правило: эти значения ни к чему не приводятся, они равны друг другу и не равны ничему другому)
// console.log(null >= 0) // (3) true
// Значение undefined несравнимо с другими значениями, везде false
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ 
// Задача (определить результаты)

// console.log (5 > 4) // true
// console.log('ананас' > 'яблоко') // false
// console.log('2' > '12') // true - посимвольное сравнение, 2 > 1
// console.log(undefined == null) // true
// console.log(undefined === null) // false
// console.log(null == '\n0\n') // false (по правилу)
// console.log(null === +'\n0\n') // false (строгое сравнение разных типов)
// ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~ ~
